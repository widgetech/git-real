execute oencpm_msglog build("Begin of MOBJ_CA_ORM_ORU_Out_Fix", char(0))

Free Record Result_Codes
Record Result_Codes
 (
    1 RC[*]
        2 Event_CD = F8
 )  ;; End

Declare CancelReason = VC 
Declare CancelDescrip  = VC
Declare bIsCancel = I2 With Public, NoConstant(FALSE) 
Declare COOOF_CONTRIB_SRC = F8 With Public,
  Constant(UAR_Get_Code_By("DISPLAYKEY", 73, "HNA306"))

Declare Get_Outbound_Alias(codeValue, contributorSrc) = VC
Declare Get_Event_Codes(o_id) = I2
Declare Add_OBX(dtaCode, dtaName, resultText, tnpText) = I2
Declare Add_OBX_NTE(commentType, commentText) = I2

If (oen_reply->CONTROL_GROUP [1]->MSH [1]->message_type->messg_type != "ORM")
  Go To EXIT_MOBJ_CA_ORM_ORU_OUT_FIX
ElseIf ((oen_reply->ORDER_GROUP [1]->ORC [1]->order_ctrl = "CA") AND
             (oen_reply->ORDER_GROUP [1]->ORC [1]->order_stat = "CA"))
  Set bIsCancel = TRUE
Else
  Go To EXIT_MOBJ_CA_ORM_ORU_OUT_FIX
EndIf


;;; Change the ORM to an ORU
Set oen_reply->CONTROL_GROUP [1]->MSH [1]->message_type->messg_type = "ORU"
Set oen_reply->CONTROL_GROUP [1]->MSH [1]->message_type->messg_trigger = "R01"

If (oen_reply->ORDER_GROUP [1]->ORC [1]->ord_ctrl_rsn_cd->identifier = "")
  Set CancelReason = "Unknown Cancel Reason"
Else
  Set CancelReason = oen_reply->ORDER_GROUP [1]->ORC [1]->ord_ctrl_rsn_cd->identifier
EndIf
Set CancelDescrip = ConCat("TNP:", Trim(CancelReason))

If (Get_Event_Codes(MSG_Order_ID) = 0)
  Set stat = Add_OBX(oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBR->univ_service_id [1]->identifier,
               oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBR->univ_service_id [1]->text,
               CancelReason, CancelDescrip)
Else
  For (rcCtr = 1 To Size(Result_Codes->RC, 5))
    Declare resCode = VC
    Set resCode = Get_Outbound_Alias(Result_Codes->RC[rcCtr]->Event_CD, COOOF_CONTRIB_SRC)
    If (resCode = "")
        Set resCode = ConCat("CD:", CnvtString(Result_Codes->RC[rcCtr]->Event_CD))
    EndIf
    Set stat = Add_OBX(resCode, UAR_Get_Code_Display(Result_Codes->RC[rcCtr]->Event_CD), 
                CancelReason, CancelDescrip)
  EndFor    
EndIf

#EXIT_MOBJ_CA_ORM_ORU_OUT_FIX
execute oencpm_msglog build("End of MOBJ_CA_ORM_ORU_Out_Fix", char(0))

;;;; Subs below

Subroutine Get_Event_Codes(o_id)
  Set stat = AlterList(Result_Codes->RC, 0)
  Declare tmpRCCtr = I2
  Select Into "nl:"
    cver.event_cd
  From orders o,
           profile_task_r ptr,
           code_value_event_r cver
  Plan o
    Where o.order_id = o_id
   Join ptr
     Where ptr.catalog_cd = o.catalog_cd AND
                 ptr.pending_ind = 1 AND
                 ptr.active_ind = TRUE
   Join cver
    Where cver.parent_cd = ptr.task_assay_cd
  Order by ptr.sequence
  Detail
    tmpRCCtr = (Size(Result_Codes->RC, 5) + 1)
    stat = AlterList(Result_Codes->RC, tmpRCCtr)
    Result_Codes->RC[tmpRCCtr]->Event_CD = cver.event_cd
  With NoCounter
  return (Size(Result_Codes->RC, 5))
End ;; End

;;;; ===================

Subroutine Add_OBX(dtaCode, dtaName, resultText, tnpText)
  Declare obxCtr = I2
  Set obxCtr = (Size(oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP, 5) + 1)
  Set stat = AlterList(oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP, obxCtr)
  Set oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP [obxCtr]->OBX->set_id = 
                  CnvtString(obxCtr)
  Set oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP [obxCtr]->OBX->value_type = "CE"
  Set oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP [obxCtr]->OBX->observation_id->identifier = 
                      dtaCode 
  Set oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP [obxCtr]->OBX->observation_id->text = 
                      dtaName
  Set oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP [obxCtr]->OBX->observation_value [1]->value_1 = 
                tnpText
  Set oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP [obxCtr]->OBX->observation_res_status = "F"
  Set stat = Add_OBX_NTE("", resultText)
  return (Size(oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP, 5))
End  ;; End

;;;; ==================

Subroutine Add_OBX_NTE(commentType, commentText)
  Declare lastOBX = I2
  Declare nteCtr = I2
  Set lastOBX = Size(oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP, 5)
  If (lastOBX > 0)
    Set nteCtr = (Size(oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP [lastOBX]->NTE, 5) + 1)
    Set stat = AlterList(oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP [lastOBX]->NTE, nteCtr)
    Set oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP [lastOBX]->NTE [nteCtr]->set_id = 
                   CnvtString(nteCtr)
    Set oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP [lastOBX]->NTE [nteCtr]->src_of_comment = 
                  commentType
    Set oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP [lastOBX]->NTE [nteCtr]->comment [1]->comment = 
                  commentText
  EndIf
  return (Size(oen_reply->ORDER_GROUP [1]->OBR_GROUP [1]->OBX_GROUP, 5))
End ;; End

;;;; ===================

Subroutine Get_Outbound_Alias(codeValue, contributorSrc)
  Declare tmpAlias = VC
  Select Into "nl:"
     cvo.alias
  From code_value_outbound cvo
  Where cvo.code_value = codeValue AND
                 cvo.contributor_source_cd = contributorSrc
  Detail
    tmpAlias = cvo.alias
  With MaxRec = 1
  return (tmpAlias)
End ;; End

;;;; END ================